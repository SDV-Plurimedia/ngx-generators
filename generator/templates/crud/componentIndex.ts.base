import {Component} from '@angular/core';
import {Router, RouterOutlet}  from '@angular/router';
import {BootboxService} from '~~hierarchy~~../../../_core/_services/bootbox';
import {NotificationService} from '~~hierarchy~~../../../_core/_services/notification';
import {BreadcrumbService} from '~~hierarchy~~../../../_core/_services/breadcrumb';
import {LoaderComponent} from 'sdv-ng2-widgets/_widgets/loader/loader';

import {~~modelName~~}               from '~~hierarchy~~../../../../../~~modelPath~~';
import {~~modelName~~Service}        from '../_services/~~model~~';

@Component({
  selector: '~~filename~~',
  template: `
  <h2>Gestion des ~~model~~s <button class='pull-right btn btn-info' (click)='add()'><i class='glyphicon glyphicon-plus'></i> Ajouter</button></h2>
  <loader [condition]='~~modelName~~_tab'>
    <datatable [data]='~~modelName~~_tab' [structure]='structure' [buttons]='buttons' [parent_scope]='scope'></datatable>
  </loader>`
})

export class ~~className~~IndexComponent {
  public ~~modelName~~_tab: ~~modelName~~[];
  public structure = null;
  public hiddenFields = [];

  private subscriptions = [] ;
  /*
  //decommenter ceci pour fixer la structure (et commenter la déclaration de structure au dessus)  public structure = [
      { id: 'id', label: 'ID'},
      { id: 'name', label: 'Nom du ~~model~~'}
  ];*/
  public buttons = [
    {
        text: 'Editer',
        action: this.edit,
        class: 'btn btn-warning'
    },
    {
        text: 'Supprimer',
        action: this.confirmDelete,
        class: 'btn btn-danger'
    }
  ];
  public scope = this;

  constructor(
    private _~~modelName~~Service: ~~modelName~~Service,
    private _bootbox : BootboxService,
    private _router: Router,
    private _bread_serv: BreadcrumbService,
    private _notifService: NotificationService
  ){
    this._bread_serv.setBreadcrumb([
      {
        'title': 'Administration'
      },
      {
        'title': 'Liste des ~~modelName~~s',
        'class': 'active'
      }
      ]);
  }

  ngOnInit() {
    let hidden = '~~hiddenFields~~';
    this.hiddenFields = hidden.split(',');

    let sub = this._~~modelName~~Service.get().subscribe(
      response => {
        if (response != null){
          this.~~modelName~~_tab = response;
        }
      },
      err => {
        this._notifService.error('Une erreur est survenue lors de la récupération des éléments.');
      }
    );
    this.subscriptions.push(sub);

    this._bootbox.setScope(this);

    //si on ne définie pas 'structure' manuellement, on fais ici une structure dynamique
    if(this.structure === null){
      console.log('construction de la structure');
      this.structure = [];
      let inst = new ~~modelName~~();
      let proprietes = Object.keys( inst );
      if(proprietes.length == 0){
        console.log('Attention, votre modèle ne contient pas de propriété avec des valeurs par défaut! Donc votre structure de CRUD sera vide...')
      }
      proprietes.forEach((key,index)=>{
      let skip = false;
        // key: the name of the object key
        // index: the ordinal position of the key within the object
        this.hiddenFields.forEach(item => {
          if (item == key)
          skip = true;
        });
        if (key != '_id' && !skip)
        {
          this.structure.push({
            id: key, label: this.capitalizeFirstLetter(key)
            });
            }
      });
    }
  }

  private capitalizeFirstLetter(string) {
      return string.charAt(0).toUpperCase() + string.slice(1);
  }

  add() {
    this._router.navigate(['~~filename~~/edit']);
  }

  edit( data : ~~modelName~~) {
    this._router.navigate(['~~filename~~/edit/' + data._id ] );
  }

  confirmDelete(data : ~~modelName~~) {
    let id_to_delete = data._id;
    this._bootbox.confirm('Etes-vous sûr de vouloir supprimer le ~~model~~ '+id_to_delete+' ?', (result: Boolean)=>{
      if(result) {
        let sub = this._~~modelName~~Service.deleteById(id_to_delete).subscribe(
          result => {
            let index = this.~~modelName~~_tab.indexOf(data);
            this.~~modelName~~_tab.splice(index, 1);
          },
          err => {
            this._notifService.error('Une erreur est survenue lors de la suppression.');
          }
        );
        this.subscriptions.push(sub);
      }
    });
  }

  ngOnDestroy(){
    this.subscriptions.forEach((sub)=>{
      sub.unsubscribe();
    });
    this._bread_serv.clean();
  }

}
