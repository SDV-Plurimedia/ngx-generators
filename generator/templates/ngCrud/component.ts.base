import {Component} from '@angular/core';
import {Router, RouterOutlet}  from '@angular/router-deprecated';
import {DatatableComponent} from '../_widgets/datatable/datatable';
import {BootboxService} from '../../services/bootbox';
import {NotificationService} from '../../services/notification';
import {BreadcrumbService} from "../../services/breadcrumb";
import {LoaderComponent} from '../_widgets/loader/loader'

import {~~modelName~~}               from '../../models/~~model~~';
import {~~modelName~~Service}        from '../../services/data/~~model~~';

@Component({
  selector: '~~filename~~',
  template: `
  <h2>Gestion des ~~model~~s <button class="pull-right btn btn-info" (click)="add()"><i class="glyphicon glyphicon-plus"></i> Ajouter</button></h2>
  <datatable [data]="~~modelName~~_tab" [structure]="structure" [buttons]="buttons" [parent_scope]="scope"></datatable>`,
  directives: [DatatableComponent],
  providers: [~~modelName~~Service, BootboxService]
})

export class ~~className~~Component {
  public ~~modelName~~_tab: ~~modelName~~[];
  public structure = null;
  public hiddenFields = [];
  /*
  //decommenter ceci pour fixer la structure
  public structure = [
      { id: "id", label: "ID"},
      { id: "name", label: "Nom du ~~model~~"}
  ];*/
  public buttons = [
    {
        text: 'Editer',
        action: this.edit,
        class: "btn btn-warning"
    },
    {
        text: 'Supprimer',
        action: this.confirmDelete,
        class: "btn btn-danger"
    }
  ];
  public scope = this;

  constructor(private _~~modelName~~Service: ~~modelName~~Service, private _bootbox : BootboxService, private _router: Router){

    let hidden = "~~hiddenFields~~";
    this.hiddenFields = hidden.split(',');

    _~~modelName~~Service.get().subscribe(response => {
    if (response != null)
    this.~~modelName~~_tab = response
    });
    _bootbox.setScope(this);

    //si on ne définie pas 'structure' manuellement, on fais ici une structure dynamique
    if(this.structure === null){
      console.log("construction de la structure");
      this.structure = [];
      let inst = new ~~modelName~~();
      let proprietes = Object.keys( inst );
      if(proprietes.length == 0){
        console.log("Attention, votre modèle ne contient pas de propriété avec des valeurs par défaut! Donc votre structure de CRUD sera vide...")
      }
      proprietes.forEach((key,index)=>{
      let skip = false;
        // key: the name of the object key
        // index: the ordinal position of the key within the object
        this.hiddenFields.forEach(item => {
          if (item == key)
          skip = true;
        });
        if (key != '_id' && !skip)
        {
          this.structure.push({
            id: key, label: key.toUpperCase()
            });
            }
      });
    }
  }

  add() {
    this._router.navigate(['~~className~~Edit']);
  }

  edit( data : ~~modelName~~) {
    this._router.navigate(['~~className~~EditId', { id: data._id }] );
  }

  confirmDelete(data : ~~modelName~~) {
    let id_to_delete = data._id;
    this._bootbox.confirm('Etes-vous sûr de vouloir supprimer le ~~model~~ '+id_to_delete+' ?', (result: Boolean)=>{
      if(result) {
        this._~~modelName~~Service.deleteById(id_to_delete).subscribe((result) => {
          let index = this.~~modelName~~_tab.indexOf(data);
          this.~~modelName~~_tab.splice(index, 1);
        });
      }
    });
  }

}
